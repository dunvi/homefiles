""" vim settings, not vi
set nocompatible

""" broken with typescript
set re=0

set hidden
set mouse=a
set ttymouse=sgr
set clipboard-=autoselect

""" syntax and colorscheme
syntax on
set termguicolors
colorscheme base16-materia

""" additional setting unless they are overridden
set cursorline
highlight CursorLine cterm=NONE ctermbg=235
highlight ExtraWhitespace ctermbg=red

"""reload changed files
set autoread

""" the command window at the bottom
set laststatus=2
set ruler
set showcmd
set showmode
set noerrorbells
set visualbell
set t_vb=

""" display stuff
set list
set listchars=trail:~,tab:>-
set number
set scrolloff=8
set sidescrolloff=8
set sidescroll=1
set nowrap
set textwidth=0
set signcolumn=yes

""" search options
set incsearch
set wrapscan
set nohls
set ignorecase

""" tab completion!
set wildmenu
set wildmode=longest,list,full
set path=$PWD/**

""" default tabbing behavior
set autoindent
set smartindent
set smarttab
set backspace=2
set showmatch
set tabstop=4
set softtabstop=4
set shiftwidth=4

if has("autocmd")
    filetype plugin indent on
endif

""" these are not correctly implemented by default
autocmd FileType yaml,yml      setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType typescript,typescriptreact     setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType proto        setlocal ts=4 sts=4 sw=4 expandtab

let g:ale_go_golangci_lint_package = 1
let g:go_fmt_fail_silently = 1
let g:go_imports_autosave = 0

function ALELSPMappings()
	let lsp_found=0
	for linter in ale#linter#Get(&filetype)
		if !empty(linter.lsp) && ale#lsp_linter#CheckWithLSP(bufnr(''), linter)
			let lsp_found=1
		endif
	endfor
	if (lsp_found)
		nnoremap <buffer> K :ALEDocumentation<cr>
		nnoremap <buffer> gr :ALEFindReferences<cr>
		nnoremap <buffer> gd :ALEGoToDefinition<cr>
		nnoremap <buffer> gy :ALEGoToTypeDefinition<cr>
		nnoremap <buffer> gh :ALEHover<cr>

		setlocal omnifunc=ale#completion#OmniFunc
	endif
endfunction
autocmd BufRead,FileType * call ALELSPMappings()

"""let g:colors = getcompletion('', 'color')
"""func! NextColors()
"""    let idx = index(g:colors, g:colors_name)
"""    return (idx + 1 >= len(g:colors) ? g:colors[0] : g:colors[idx + 1])
"""endfunc
"""func! PrevColors()
"""    let idx = index(g:colors, g:colors_name)
"""    return (idx - 1 < 0 ? g:colors[-1] : g:colors[idx - 1 ])
"""endfunc
"""nnoremap <C-n> :exe "colorscheme " .. NextColors()<CR>
"""nnoremap <C-p> :exe "colorscheme " .. PrevColors()<CR>
